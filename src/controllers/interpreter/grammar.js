/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,41],$V2=[1,42],$V3=[1,43],$V4=[1,44],$V5=[1,45],$V6=[1,46],$V7=[1,12],$V8=[1,19],$V9=[1,20],$Va=[1,22],$Vb=[1,27],$Vc=[1,31],$Vd=[1,37],$Ve=[1,29],$Vf=[1,30],$Vg=[1,32],$Vh=[1,33],$Vi=[1,38],$Vj=[1,34],$Vk=[1,35],$Vl=[2,5,8,9,10,11,12,13,16,26,33,34,36,40,44,46,47,53,54,56,63,89,92],$Vm=[1,61],$Vn=[2,109],$Vo=[1,62],$Vp=[1,65],$Vq=[1,63],$Vr=[1,64],$Vs=[1,68],$Vt=[1,78],$Vu=[1,101],$Vv=[1,94],$Vw=[1,96],$Vx=[1,75],$Vy=[1,79],$Vz=[1,90],$VA=[1,103],$VB=[1,102],$VC=[1,104],$VD=[1,105],$VE=[1,106],$VF=[1,95],$VG=[1,97],$VH=[1,98],$VI=[1,99],$VJ=[1,100],$VK=[1,109],$VL=[1,110],$VM=[44,58,65],$VN=[1,114],$VO=[1,115],$VP=[16,23,43,51,59,64,65,70,71,72,73,74,75,76,77,79,80,81,82],$VQ=[1,146],$VR=[1,148],$VS=[1,136],$VT=[1,137],$VU=[1,138],$VV=[1,139],$VW=[1,140],$VX=[1,141],$VY=[1,142],$VZ=[1,143],$V_=[1,144],$V$=[1,145],$V01=[1,147],$V11=[1,149],$V21=[2,5,8,9,10,11,12,13,16,26,33,34,36,40,41,44,46,47,53,54,56,61,63,71,78,88,89,90,91,92,93,94,95,98,99,100,101,102],$V31=[1,173],$V41=[16,43,51],$V51=[41,44,47,53,54,61,71,78,88,89,90,91,92,93,94,95,98,99,100,101,102],$V61=[2,5,8,9,10,11,12,13,16,23,26,33,34,36,40,43,44,46,47,49,51,53,54,56,59,63,64,65,70,71,72,73,74,75,76,77,79,80,81,82,89,92],$V71=[43,51],$V81=[16,23,43,51,59,64,65,70,71,74,76,77,79,80,81,82],$V91=[16,23,43,51,59,64,65,74,76,77,79,80,81,82],$Va1=[16,23,43,45,51,59,64,65,70,71,72,73,74,75,76,77,79,80,81,82],$Vb1=[2,5,8,9,10,11,12,13,16,23,26,33,34,36,40,43,44,46,47,51,53,54,56,59,63,64,65,70,71,72,73,74,75,76,77,79,80,81,82,89,92];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"TIPO":7,"RDOUBLE":8,"RENTERO":9,"RCHAR":10,"RSTRING":11,"RBOOLEAN":12,"VOID":13,"BLOQUE_INSTRUCCIONES":14,"LLAVEIZQ":15,"LLAVEDER":16,"DEFPRINT":17,"DECLARAR":18,"DIF":19,"FUNCION":20,"DWHILE":21,"LLAMAR_FUNCION":22,"PTCOMA":23,"DFOR":24,"DOWHILE":25,"SWITCHCASE":26,"INCREMENTOYDECREMENTO":27,"DTOLOWER":28,"DTOUPPER":29,"VECTOR":30,"MODIFICARVECTOR":31,"DRETURN":32,"CONTINUE":33,"BREAK":34,"LISTA":35,"MAIN":36,"AGREGARVALORLISTA":37,"MODIFICARVALORLISTA":38,"ASIGNACION":39,"RPRIN":40,"PARIZQ":41,"EXPRESION":42,"PARDER":43,"ID":44,"IGUAL":45,"RRETURN":46,"IF":47,"DELSE":48,"ELSE":49,"LISTA_PARAMETROS":50,"COMA":51,"PARAMETRO":52,"WHILE":53,"FOR":54,"CONDICIONINICIALFOR":55,"DO":56,"LISTA_EXPRESIONES":57,"CORIZR":58,"CORDER":59,"NEW":60,"ENTERO":61,"ACCEDERVECTOR":62,"LIST":63,"MENORQUE":64,"MAYORQUE":65,"ACCEDERID":66,"PUNTO":67,"ACCEDERLISTA":68,"PRIMITIVO":69,"MAS":70,"MENOS":71,"DIVISION":72,"POR":73,"POTENCIA":74,"MODULO":75,"AND":76,"OR":77,"NOT":78,"IGUALACION":79,"DIFERENCIACION":80,"MENOROIGUALQUE":81,"MAYOROIGUALQUE":82,"DLENGTH":83,"DTRUNCATE":84,"DROUND":85,"DTYPEOF":86,"DTOSTRING":87,"OPERADORTERNARIO":88,"TOLOWER":89,"TRUNCATE":90,"LENGTH":91,"TOUPPER":92,"ROUND":93,"TYPEOF":94,"TOSTRING":95,"AUMENTO":96,"REDUCCION":97,"DECIMAL":98,"CADENA":99,"CARACTER":100,"TRUE":101,"FALSE":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RDOUBLE",9:"RENTERO",10:"RCHAR",11:"RSTRING",12:"RBOOLEAN",13:"VOID",15:"LLAVEIZQ",16:"LLAVEDER",23:"PTCOMA",26:"SWITCHCASE",33:"CONTINUE",34:"BREAK",36:"MAIN",40:"RPRIN",41:"PARIZQ",43:"PARDER",44:"ID",45:"IGUAL",46:"RRETURN",47:"IF",49:"ELSE",51:"COMA",53:"WHILE",54:"FOR",56:"DO",58:"CORIZR",59:"CORDER",60:"NEW",61:"ENTERO",63:"LIST",64:"MENORQUE",65:"MAYORQUE",67:"PUNTO",70:"MAS",71:"MENOS",72:"DIVISION",73:"POR",74:"POTENCIA",75:"MODULO",76:"AND",77:"OR",78:"NOT",79:"IGUALACION",80:"DIFERENCIACION",81:"MENOROIGUALQUE",82:"MAYOROIGUALQUE",88:"OPERADORTERNARIO",89:"TOLOWER",90:"TRUNCATE",91:"LENGTH",92:"TOUPPER",93:"ROUND",94:"TYPEOF",95:"TOSTRING",96:"AUMENTO",97:"REDUCCION",98:"DECIMAL",99:"CADENA",100:"CARACTER",101:"TRUE",102:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[14,3],[14,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,3],[6,1],[6,1],[6,1],[6,1],[17,5],[18,3],[18,5],[32,2],[32,3],[39,4],[19,5],[19,6],[48,2],[48,2],[20,6],[20,5],[50,3],[50,1],[52,2],[21,5],[24,8],[55,1],[55,1],[25,7],[57,3],[57,1],[30,11],[30,9],[31,4],[35,12],[37,6],[38,4],[42,1],[42,3],[42,3],[42,3],[42,3],[42,2],[42,3],[42,3],[42,1],[42,1],[42,3],[42,3],[42,3],[42,2],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[22,4],[22,3],[28,4],[84,4],[83,4],[29,4],[85,4],[86,4],[87,4],[68,6],[62,4],[66,1],[27,2],[27,2],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 48:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = Type.DOUBLE; 
break;
case 5:
 this.$ = Type.INT; 
break;
case 6:
 this.$ = Type.CHAR; 
break;
case 7:
 this.$ = Type.STRING; 
break;
case 8:
 this.$ = Type.BOOLEAN; 
break;
case 9:
 this.$ = Type.VOID; 
break;
case 10:
 this.$ = new Statement($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 11:
 this.$ = new Statement([],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 12: case 13: case 14: case 15: case 16: case 18: case 19: case 20: case 24: case 25: case 26: case 29: case 31: case 32: case 33: case 43: case 44: case 52: case 53: case 63: case 71: case 72: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97:
 this.$ = $$[$0]; 
break;
case 17: case 21: case 22: case 23: case 27: case 28:
 this.$ = $$[$0-1]; 
break;
case 30:
this.$= new Main($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 34:
 this.$= new ErrorSintactico(yytext, _$[$0].first_line, _$[$0].first_column);
     
    console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 35:
 this.$ = new Print(_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2]); 
break;
case 36:
 this.$ = new Todeclare($$[$0-1],$$[$0-2],null,_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 37:
 this.$ = new Todeclare($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 38:
 this.$ = new ReturnExp(null, _$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 39:
 this.$ = new ReturnExp($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column );
break;
case 40:
 this.$ = new Assignation($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 41:
 this.$ = new If($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 42:
  this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 45:
 this.$ = new Function($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column ); 
break;
case 46:
 this.$ = new Function($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 47: case 55:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 49:
this.$ = new Parameters($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 50:
  this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 51:
  this.$ = new For($$[$0-5], $$[$0-4],$$[$0-2],$$[$0], _$[$0-7].first_line, _$[$0-7].first_column ); 
break;
case 54:
  this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column ); 
break;
case 56:
 this.$ = [$$[$0]] 
break;
case 64:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.SUMA,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 65:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.RESTA,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 66:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.DIVISION,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 67:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 68:
 this.$ = new Arithmetic($$[$0],$$[$0],TipoAritmetica.MENOSUNARIO,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 69:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.POTENCIA,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 70:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.MODULO,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 73:
 this.$ = $$[$0-1];
break;
case 74:
 this.$ = new Logic($$[$0-2],$$[$0],TipoLogica.AND,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 75:
 this.$ = new Logic($$[$0-2],$$[$0],TipoLogica.OR,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 76:
 this.$ = new Logic($$[$0],$$[$0],TipoLogica.NOT,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 77:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.IGUAL,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 78:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.DIFERENTE,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 79:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.MENOR,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 80:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.MENORIGUAL,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 81:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.MAYOR,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 82:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.MAYORIGUAL,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 98:
 this.$ = new ObtenerFunction($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 99:
 this.$ = new ObtenerFunction($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 100:
 this.$ = new toLower($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 101:
 this.$ = new Truncate($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 102:
 this.$ = new Length($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 103:
 this.$ = new toUpper($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 104:
 this.$ = new Round($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 105:
 this.$ = new Typeof($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 106:
 this.$ = new toString($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 109:
 this.$ = new Access($$[$0],_$[$0].first_line, _$[$0].first_column); 
break;
case 110:
 this.$ = new IncreaseDecrease($$[$0-1],TipoAritmetica.INCREMENTO,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 111:
 this.$ = new IncreaseDecrease($$[$0-1],TipoAritmetica.DECREMENTO,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 112:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.DOUBLE); 
break;
case 113:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.INT); 
break;
case 114:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.STRING);
break;
case 115:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.CHAR); 
break;
case 116: case 117:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.BOOLEAN); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:28,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,17:4,18:5,19:6,20:7,21:8,22:9,24:10,25:11,26:$V7,27:13,28:14,29:15,30:16,31:17,32:18,33:$V8,34:$V9,35:21,36:$Va,37:23,38:24,39:25,40:$Vb,44:$Vc,46:$Vd,47:$Ve,53:$Vf,54:$Vg,56:$Vh,62:36,63:$Vi,66:39,68:40,89:$Vj,92:$Vk},{1:[3]},{2:$V0,5:[1,47],6:48,7:28,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,17:4,18:5,19:6,20:7,21:8,22:9,24:10,25:11,26:$V7,27:13,28:14,29:15,30:16,31:17,32:18,33:$V8,34:$V9,35:21,36:$Va,37:23,38:24,39:25,40:$Vb,44:$Vc,46:$Vd,47:$Ve,53:$Vf,54:$Vg,56:$Vh,62:36,63:$Vi,66:39,68:40,89:$Vj,92:$Vk},o($Vl,[2,3]),o($Vl,[2,12]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),{23:[1,49]},o($Vl,[2,18]),o($Vl,[2,19]),o($Vl,[2,20]),{23:[1,50]},{23:[1,51]},{23:[1,52]},o($Vl,[2,24]),o($Vl,[2,25]),o($Vl,[2,26]),{23:[1,53]},{23:[1,54]},o($Vl,[2,29]),{22:55,44:[1,56]},o($Vl,[2,31]),o($Vl,[2,32]),o($Vl,[2,33]),o($Vl,[2,34]),{41:[1,57]},{44:[1,58],58:[1,59]},{41:[1,60]},{41:$Vm},o([15,58,67],$Vn,{41:$Vo,45:$Vp,96:$Vq,97:$Vr}),{41:[1,66]},{14:67,15:$Vs},{41:[1,69]},{41:[1,70]},{45:[1,71]},{19:91,21:93,22:77,23:[1,72],24:92,27:80,28:81,29:82,41:$Vt,42:73,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{64:[1,107]},{15:$VK,58:$VL,67:[1,108]},{45:[1,111]},o($VM,[2,4]),o($VM,[2,5]),o($VM,[2,6]),o($VM,[2,7]),o($VM,[2,8]),o($VM,[2,9]),{1:[2,1]},o($Vl,[2,2]),o($Vl,[2,17]),o($Vl,[2,21]),o($Vl,[2,22]),o($Vl,[2,23]),o($Vl,[2,27]),o($Vl,[2,28]),{23:[1,112]},{41:$Vo},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:113,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{23:$VN,41:[1,116],45:$VO},{59:[1,117]},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:118,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:119,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:122,43:[1,121],44:$Vu,47:$Ve,53:$Vv,54:$Vg,57:120,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},o($VP,[2,110]),o($VP,[2,111]),{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:123,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{7:128,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,18:126,39:125,44:[1,127],55:124},{53:[1,129]},{2:$V0,4:130,6:3,7:28,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,16:[1,131],17:4,18:5,19:6,20:7,21:8,22:9,24:10,25:11,26:$V7,27:13,28:14,29:15,30:16,31:17,32:18,33:$V8,34:$V9,35:21,36:$Va,37:23,38:24,39:25,40:$Vb,44:$Vc,46:$Vd,47:$Ve,53:$Vf,54:$Vg,56:$Vh,62:36,63:$Vi,66:39,68:40,89:$Vj,92:$Vk},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:132,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:133,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:134,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},o($Vl,[2,38]),{23:[1,135],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},o($VP,[2,63]),{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:150,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},o($VP,[2,71],{15:$VK,58:$VL}),o($VP,[2,72]),{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:151,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:152,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},o($VP,[2,83]),o($VP,[2,84]),o($VP,[2,85]),o($VP,[2,86]),o($VP,[2,87]),o($VP,[2,88]),o($VP,[2,89]),o($VP,[2,90]),o($VP,[2,91]),o($VP,[2,92]),o($VP,[2,93]),o($VP,[2,94]),o($VP,[2,95]),o($VP,[2,96]),o($VP,[2,97],{41:$Vm}),o($VP,[2,112]),o($VP,[2,113]),o($VP,[2,114]),o($VP,[2,115]),o($VP,[2,116]),o($VP,[2,117]),o([15,16,23,43,51,58,59,64,65,70,71,72,73,74,75,76,77,79,80,81,82],$Vn,{41:$Vo,96:$Vq,97:$Vr}),{41:[1,153]},{41:[1,154]},{41:[1,155]},{41:[1,156]},{41:[1,157]},{7:158,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6},{41:[1,159]},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:160,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{58:[1,161]},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:162,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},o($Vl,[2,30]),{43:[1,163],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},o($V21,[2,36]),{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:164,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{7:168,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,43:[1,166],50:165,52:167},{44:[1,169]},{43:[1,170],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{43:[1,171],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{43:[1,172],51:$V31},o($VP,[2,99]),o($V41,[2,56],{64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11}),{23:[1,174],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:175,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},o($V51,[2,52]),o($V51,[2,53]),{45:$Vp},{44:[1,176]},{41:[1,177]},{2:$V0,6:48,7:28,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,16:[1,178],17:4,18:5,19:6,20:7,21:8,22:9,24:10,25:11,26:$V7,27:13,28:14,29:15,30:16,31:17,32:18,33:$V8,34:$V9,35:21,36:$Va,37:23,38:24,39:25,40:$Vb,44:$Vc,46:$Vd,47:$Ve,53:$Vf,54:$Vg,56:$Vh,62:36,63:$Vi,66:39,68:40,89:$Vj,92:$Vk},o($V61,[2,11]),{43:[1,179],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{43:[1,180],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{23:[1,181],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},o($Vl,[2,39]),{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:182,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:183,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:184,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:185,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:186,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:187,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:188,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:189,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:190,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:191,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:192,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:193,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:194,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:195,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},o($VP,[2,68]),{43:[1,196],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},o($VP,[2,76]),{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:197,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:198,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:199,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:200,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:201,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{65:[1,202]},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:203,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{16:[1,204],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:205,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{23:[1,206],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{23:[1,207]},{23:[1,208],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{43:[1,209],51:[1,210]},{14:211,15:$Vs},o($V71,[2,48]),{44:[1,212]},{45:[1,213]},{14:214,15:$Vs},{14:215,15:$Vs},o($VP,[2,98]),{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:216,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},o($V21,[2,40]),{23:[1,217],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{23:$VN,45:$VO},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:218,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},o($V61,[2,10]),o($VP,[2,100]),o($VP,[2,103]),o($Vl,[2,59]),o($V81,[2,64],{72:$VU,73:$VV,75:$VX}),o($V81,[2,65],{72:$VU,73:$VV,75:$VX}),o($VP,[2,66]),o($VP,[2,67]),o([16,23,43,51,59,74],[2,69],{64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11}),o($VP,[2,70]),o([16,23,43,51,59,74,76,77],[2,74],{64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,75:$VX,79:$V_,80:$V$,81:$V01,82:$V11}),o([16,23,43,51,59,74,77],[2,75],{64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,75:$VX,76:$VY,79:$V_,80:$V$,81:$V01,82:$V11}),o($V91,[2,77],{70:$VS,71:$VT,72:$VU,73:$VV,75:$VX}),o($V91,[2,78],{70:$VS,71:$VT,72:$VU,73:$VV,75:$VX}),o($V91,[2,79],{70:$VS,71:$VT,72:$VU,73:$VV,75:$VX}),o($V91,[2,80],{70:$VS,71:$VT,72:$VU,73:$VV,75:$VX}),o($V91,[2,81],{70:$VS,71:$VT,72:$VU,73:$VV,75:$VX}),o($V91,[2,82],{70:$VS,71:$VT,72:$VU,73:$VV,75:$VX}),o($VP,[2,73]),{43:[1,219],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{43:[1,220],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{43:[1,221],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{43:[1,222],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{43:[1,223],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{44:[1,224]},{43:[1,225],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},o($Va1,[2,108]),{59:[1,226],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},o($Vl,[2,62]),o($Vl,[2,35]),o($V21,[2,37]),{14:227,15:$Vs},{7:168,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,52:228},o($Vl,[2,46]),o($V71,[2,49]),{15:[1,230],60:[1,229]},o($Vb1,[2,41],{48:231,49:[1,232]}),o($Vb1,[2,50]),o($V41,[2,55],{64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11}),{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:233,44:$Vu,47:$Ve,53:$Vv,54:$Vg,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},{43:[1,234],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},o($VP,[2,102]),o($VP,[2,101]),o($VP,[2,104]),o($VP,[2,105]),o($VP,[2,106]),{45:[1,235]},{23:[1,236]},{59:[1,237]},o($Vl,[2,45]),o($V71,[2,47]),{7:238,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6},{19:91,21:93,22:77,24:92,27:80,28:81,29:82,41:$Vt,42:122,44:$Vu,47:$Ve,53:$Vv,54:$Vg,57:239,61:$Vw,62:88,66:76,68:89,69:74,71:$Vx,78:$Vy,83:83,84:84,85:85,86:86,87:87,88:$Vz,89:$Vj,90:$VA,91:$VB,92:$Vk,93:$VC,94:$VD,95:$VE,98:$VF,99:$VG,100:$VH,101:$VI,102:$VJ},o($Vb1,[2,42]),{14:241,15:$Vs,19:240,47:$Ve},{43:[1,242],64:$VQ,65:$VR,70:$VS,71:$VT,72:$VU,73:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,79:$V_,80:$V$,81:$V01,82:$V11},{23:[1,243]},{60:[1,244]},o($Vl,[2,61]),o($Va1,[2,107]),{58:[1,245]},{16:[1,246],51:$V31},o($Vb1,[2,43]),o($Vb1,[2,44]),{14:247,15:$Vs},o($Vl,[2,54]),{63:[1,248]},{61:[1,249]},{23:[1,250]},o($Vb1,[2,51]),{64:[1,251]},{59:[1,252]},o($Vl,[2,58]),{7:253,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6},{23:[1,254]},{65:[1,255]},o($Vl,[2,57]),{23:[1,256]},o($Vl,[2,60])],
defaultActions: {47:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  // importar tipos
  const {Type} = require('./abstract/Return');
  const {Primitivo} = require('./expression/Primitivo');
  const {Print} = require('./instruction/Print');
  const {Todeclare} = require('./instruction/Todeclare');
  const {Access} = require('./expression/Access');
  const {Arithmetic} = require('./expression/Arithmetic');
  const {TipoAritmetica} = require('./utils/TipoAritmetica');
  const {Logic} = require('./expression/Logic');
  const {TipoLogica} = require('./utils/TipoLogica');
  const {Relational} = require('./expression/Relational');
  const {TipoRelacional} = require('./utils/TipoRelacional');
  const {Statement} = require('./instruction/Statement');
  const {Function} = require('./instruction/Function');
  const {Parameters} = require('./expression/Parameters');
  const {ObtenerFunction} = require('./expression/ObtenerFunction');
  const {Assignation} = require('./instruction/Assignation');
  const {TablaErrores, ListaTablaErrores} = require('./reports/TablaErrores');
  const {If} = require('./instruction/If');
  const {While} = require('./instruction/While');
  const {IncreaseDecrease} = require('./expression/IncreaseDecrease');
  const {Main} = require('./instruction/Main');
  const {toLower} = require('./expression/toLower');
  const {toUpper} = require('./expression/toUpper');
  const {Length} = require('./expression/Length');
  const {Truncate} = require('./expression/Truncate');
  const {Round} = require('./expression/Round');
  const {Typeof} = require('./expression/Typeof');
  const {toString} = require('./expression/toString');
    const {For} = require('./instruction/For');
    const {DoWhile} = require('./instruction/DoWhile');
    const {ReturnExp} = require('./expression/ReturnExp');
    const {ErrorSintactico} = require('./errors/ErrorSintactico');
    const {ErrorLexico} = require('./errors/ErrorLexico');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 23;
break;
case 1:return 41;
break;
case 2:return 43;
break;
case 3:return 67;
break;
case 4:return 'DOSPUNTOS';
break;
case 5:return 51;
break;
case 6:return 58;
break;
case 7:return 59;
break;
case 8:return 15;
break;
case 9:return "LLAVEDER";
break;
case 10:return 'KLEENE';
break;
case 11:return "MENOROIGUALQUE";
break;
case 12:return 82;
break;
case 13:return "IGUALACION";
break;
case 14:return 45;
break;
case 15:return 'DOLAR';
break;
case 16:return 96;
break;
case 17:return 97;
break;
case 18:return 80;
break;
case 19:return "MENORQUE";
break;
case 20:return 65;
break;
case 21:return 78;
break;
case 22:return 76;
break;
case 23:return 77;
break;
case 24:return 40;   // funcion de imprimir
break;
case 25:return 101;
break;
case 26:return 102;
break;
case 27:return 47;
break;
case 28:return 53;    
break;
case 29:return 49;     
break;
case 30:return 13;     
break;
case 31:return 89;
break;
case 32:return 92;
break;
case 33:return 46;  
break;
case 34:return 60;
break;
case 35:return 63;
break;
case 36:return 'ADD';
break;
case 37:return 'SWITCH';
break;
case 38:return 'CASE';
break;
case 39:return 'DEFAULT';
break;
case 40:return 54;
break;
case 41:return 56;
break;
case 42:return 34;
break;
case 43:return 33;
break;
case 44:return 91;
break;
case 45:return 90;
break;
case 46:return 93;
break;
case 47:return 94;
break;
case 48:return 95;
break;
case 49:return 'TOCHARARRAY';
break;
case 50:return 36;
break;
case 51:return 70;
break;
case 52:return 71;
break;
case 53:return 73;
break;
case 54:return 72;
break;
case 55:return 74;
break;
case 56:return 75;
break;
case 57:return 9;
break;
case 58:return 11;
break;
case 59:return 10;
break;
case 60:return 12;
break;
case 61:return 8;
break;
case 62:
break;
case 63:
break;
case 64:// comment a line
break;
case 65:// comment multiple lines
break;
case 66:return 44;
break;
case 67:return 98;
break;
case 68:return 61;
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 100; 
break;
case 70:cadena="";this.begin("string");
break;
case 71:cadena+=yy_.yytext;
break;
case 72:cadena+="\"";
break;
case 73:cadena+="\n";
break;
case 74:cadena+="\t";
break;
case 75:cadena+="\\";
break;
case 76:cadena+="\'";
break;
case 77:yy_.yytext=cadena; this.popState(); return 99;
break;
case 78:return 5;
break;
case 79: 
 $$ = new ErrorLexico(yy_.yytext,  yy_.yylloc.first_line, yy_.yylloc.first_column ); 
 $$.execute();
   /*
  ListaTablaErrores.push(new TablaErrores("L√©xico", "El caracter "+yy_.yytext+" no pertenece al lenguaje",  yy_.yylloc.first_line, yy_.yylloc.first_column));
  console.log(new TablaErrores("L√©xico", "El caracter "+yy_.yytext+" no pertenece al lenguaje",  yy_.yylloc.first_line, yy_.yylloc.first_column ))*/
  console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\$)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:while\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:Length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[a-zA-Z][a-zA-Z0-9_√±√ë]*)/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:[0-9]+\b)/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[71,72,73,74,75,76,77],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}