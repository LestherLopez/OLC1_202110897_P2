/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GRAMMAR = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,32],$V2=[1,33],$V3=[1,34],$V4=[1,35],$V5=[1,36],$V6=[1,37],$V7=[1,16],$V8=[1,21],$V9=[1,25],$Va=[1,23],$Vb=[1,24],$Vc=[1,29],$Vd=[1,26],$Ve=[1,27],$Vf=[2,5,8,9,10,11,12,13,16,30,34,38,40,46,53,79,82],$Vg=[2,94],$Vh=[1,52],$Vi=[1,53],$Vj=[1,54],$Vk=[1,61],$Vl=[1,62],$Vm=[37,38,48,55],$Vn=[1,70],$Vo=[1,89],$Vp=[1,84],$Vq=[1,67],$Vr=[1,71],$Vs=[1,82],$Vt=[1,91],$Vu=[1,90],$Vv=[1,92],$Vw=[1,93],$Vx=[1,94],$Vy=[1,83],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[2,5,8,9,10,11,12,13,16,23,30,34,37,38,40,44,46,49,53,54,55,60,61,62,63,64,65,66,67,69,70,71,72,79,82],$VE=[1,124],$VF=[1,126],$VG=[1,114],$VH=[1,115],$VI=[1,116],$VJ=[1,117],$VK=[1,118],$VL=[1,119],$VM=[1,120],$VN=[1,121],$VO=[1,122],$VP=[1,123],$VQ=[1,125],$VR=[1,127],$VS=[1,146],$VT=[16,37,44],$VU=[1,182],$VV=[37,44],$VW=[2,5,8,9,10,11,12,13,16,23,30,34,37,38,39,40,44,46,49,53,54,55,60,61,62,63,64,65,66,67,69,70,71,72,79,82],$VX=[2,5,8,9,10,11,12,13,16,23,30,34,37,38,40,44,46,49,53,54,55,60,61,64,66,67,69,70,71,72,79,82],$VY=[2,5,8,9,10,11,12,13,16,23,30,34,37,38,40,44,46,49,53,54,55,64,66,67,69,70,71,72,79,82],$VZ=[2,5,8,9,10,11,12,13,16,30,34,38,40,42,46,53,79,82];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"TIPO":7,"RDOUBLE":8,"RENTERO":9,"RCHAR":10,"RSTRING":11,"RBOOLEAN":12,"VOID":13,"BLOQUE_INSTRUCCIONES":14,"LLAVEIZQ":15,"LLAVEDER":16,"DEFPRINT":17,"DECLARAR":18,"DIF":19,"FUNCION":20,"DWHILE":21,"LLAMAR_FUNCION":22,"PTCOMA":23,"INCREMENTOYDECREMENTO":24,"DTOLOWER":25,"DTOUPPER":26,"VECTOR":27,"MODIFICARVECTOR":28,"LISTA":29,"MAIN":30,"AGREGARVALORLISTA":31,"MODIFICARVALORLISTA":32,"ASIGNACION":33,"RPRIN":34,"PARIZQ":35,"EXPRESION":36,"PARDER":37,"ID":38,"IGUAL":39,"IF":40,"DELSE":41,"ELSE":42,"LISTA_PARAMETROS":43,"COMA":44,"PARAMETRO":45,"WHILE":46,"LISTA_EXPRESIONES":47,"CORIZR":48,"CORDER":49,"NEW":50,"ENTERO":51,"ACCEDERVECTOR":52,"LIST":53,"MENORQUE":54,"MAYORQUE":55,"ACCEDERID":56,"PUNTO":57,"ACCEDERLISTA":58,"PRIMITIVO":59,"MAS":60,"MENOS":61,"DIVISION":62,"POR":63,"POTENCIA":64,"MODULO":65,"AND":66,"OR":67,"NOT":68,"IGUALACION":69,"DIFERENCIACION":70,"MENOROIGUALQUE":71,"MAYOROIGUALQUE":72,"DLENGTH":73,"DTRUNCATE":74,"DROUND":75,"DTYPEOF":76,"DTOSTRING":77,"OPERADORTERNARIO":78,"TOLOWER":79,"TRUNCATE":80,"LENGTH":81,"TOUPPER":82,"ROUND":83,"TYPEOF":84,"TOSTRING":85,"AUMENTO":86,"REDUCCION":87,"DECIMAL":88,"CADENA":89,"CARACTER":90,"TRUE":91,"FALSE":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RDOUBLE",9:"RENTERO",10:"RCHAR",11:"RSTRING",12:"RBOOLEAN",13:"VOID",15:"LLAVEIZQ",16:"LLAVEDER",23:"PTCOMA",30:"MAIN",34:"RPRIN",35:"PARIZQ",37:"PARDER",38:"ID",39:"IGUAL",40:"IF",42:"ELSE",44:"COMA",46:"WHILE",48:"CORIZR",49:"CORDER",50:"NEW",51:"ENTERO",53:"LIST",54:"MENORQUE",55:"MAYORQUE",57:"PUNTO",60:"MAS",61:"MENOS",62:"DIVISION",63:"POR",64:"POTENCIA",65:"MODULO",66:"AND",67:"OR",68:"NOT",69:"IGUALACION",70:"DIFERENCIACION",71:"MENOROIGUALQUE",72:"MAYOROIGUALQUE",78:"OPERADORTERNARIO",79:"TOLOWER",80:"TRUNCATE",81:"LENGTH",82:"TOUPPER",83:"ROUND",84:"TYPEOF",85:"TOSTRING",86:"AUMENTO",87:"REDUCCION",88:"DECIMAL",89:"CADENA",90:"CARACTER",91:"TRUE",92:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[14,3],[14,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,3],[6,1],[6,1],[6,1],[6,2],[17,5],[18,3],[18,5],[18,7],[33,4],[19,5],[19,6],[41,2],[41,2],[20,6],[20,5],[43,3],[43,1],[45,2],[21,5],[22,4],[22,3],[47,3],[47,1],[27,11],[27,9],[28,4],[29,12],[31,6],[32,4],[36,1],[36,3],[36,3],[36,3],[36,3],[36,2],[36,3],[36,3],[36,1],[36,1],[36,3],[36,3],[36,3],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[25,4],[74,4],[73,4],[26,4],[75,4],[76,4],[77,4],[58,6],[52,4],[56,1],[24,2],[24,2],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 41:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = Type.DOUBLE; 
break;
case 5:
 this.$ = Type.INT; 
break;
case 6:
 this.$ = Type.CHAR; 
break;
case 7:
 this.$ = Type.STRING; 
break;
case 8:
 this.$ = Type.BOOLEAN; 
break;
case 9:
 this.$ = Type.VOID; 
break;
case 10:
 this.$ = new Statement($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 11:
 this.$ = new Statement([],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 12: case 13: case 14: case 15: case 16: case 21: case 22: case 23: case 25: case 26: case 27: case 36: case 37: case 54: case 62: case 63: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84:
 this.$ = $$[$0]; 
break;
case 17: case 18: case 19: case 20:
 this.$ = $$[$0-1]; 
break;
case 24:
this.$= new Main($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 28:
 this.$ = ListaTablaErrores.push(new TablaErrores("Sintáctico", "No se esperaba el identificador "+yytext, this._$.first_line, this._$.first_column ));  
    console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 29:
 this.$ = new Print(_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2]); 
break;
case 30:
 this.$ = new Todeclare($$[$0-1],$$[$0-2],null,_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 31:
 this.$ = new Todeclare($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 33:
 this.$ = new Assignation($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 34:
 this.$ = new If($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 35:
  this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 38:
 this.$ = new Function($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column ); 
break;
case 39:
 this.$ = new Function($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 40: case 46:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 42:
this.$ = new Parameters($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 43:
  this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 44:
 this.$ = new ObtenerFunction($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 45:
 this.$ = new ObtenerFunction($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 47:
 this.$ = [$$[$0]] 
break;
case 55:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.SUMA,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 56:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.RESTA,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 57:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.DIVISION,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 58:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 59:
 this.$ = new Arithmetic($$[$0],$$[$0],TipoAritmetica.MENOSUNARIO,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 60:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.POTENCIA,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 61:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.MODULO,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 64:
 this.$ = $$[$0-1];
break;
case 65:
 this.$ = new Logic($$[$0-2],$$[$0],TipoLogica.AND,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 66:
 this.$ = new Logic($$[$0-2],$$[$0],TipoLogica.OR,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 67:
 this.$ = new Logic($$[$0],$$[$0],TipoLogica.NOT,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 68:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.IGUAL,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 69:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.DIFERENTE,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 70:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.MENOR,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 71:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.MENORIGUAL,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 72:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.MAYOR,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 73:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.MAYORIGUAL,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 85:
 this.$ = new toLower($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 86:
 this.$ = new Truncate($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 87:
 this.$ = new Length($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 88:
 this.$ = new toUpper($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 89:
 this.$ = new Round($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 90:
 this.$ = new Typeof($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 91:
 this.$ = new toString($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 94:
 this.$ = new Access($$[$0],_$[$0].first_line, _$[$0].first_column); 
break;
case 95:
 this.$ = new IncreaseDecrease($$[$0-1],TipoAritmetica.INCREMENTO,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 96:
 this.$ = new IncreaseDecrease($$[$0-1],TipoAritmetica.DECREMENTO,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 97:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.DOUBLE); 
break;
case 98:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.INT); 
break;
case 99:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.STRING);
break;
case 100:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.CHAR); 
break;
case 101: case 102:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.BOOLEAN); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:22,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,17:4,18:5,19:6,20:7,21:8,22:9,24:10,25:11,26:12,27:13,28:14,29:15,30:$V7,31:17,32:18,33:19,34:$V8,38:$V9,40:$Va,46:$Vb,52:28,53:$Vc,56:30,58:31,79:$Vd,82:$Ve},{1:[3]},{2:$V0,5:[1,38],6:39,7:22,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,17:4,18:5,19:6,20:7,21:8,22:9,24:10,25:11,26:12,27:13,28:14,29:15,30:$V7,31:17,32:18,33:19,34:$V8,38:$V9,40:$Va,46:$Vb,52:28,53:$Vc,56:30,58:31,79:$Vd,82:$Ve},o($Vf,[2,3]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),{23:[1,40]},{23:[1,41]},{23:[1,42]},{23:[1,43]},o($Vf,[2,21]),o($Vf,[2,22]),o($Vf,[2,23]),{22:44,38:[1,45]},o($Vf,[2,25]),o($Vf,[2,26]),o($Vf,[2,27]),{23:[1,46]},{35:[1,47]},{38:[1,48],48:[1,49]},{35:[1,50]},{35:[1,51]},o([15,48,57],$Vg,{35:$Vh,39:[1,55],86:$Vi,87:$Vj}),{35:[1,56]},{35:[1,57]},{39:[1,58]},{54:[1,59]},{15:$Vk,48:$Vl,57:[1,60]},{39:[1,63]},o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),o($Vm,[2,8]),o($Vm,[2,9]),{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),{23:[1,64]},{35:$Vh},o($Vf,[2,28]),{22:69,24:72,25:73,26:74,35:$Vn,36:65,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{23:[1,95],35:[1,97],39:[1,96]},{49:[1,98]},{22:69,24:72,25:73,26:74,35:$Vn,36:99,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:100,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:103,37:[1,102],38:$Vo,47:101,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},o($VD,[2,95]),o($VD,[2,96]),{22:69,24:72,25:73,26:74,35:$Vn,36:104,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:105,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:106,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:107,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{7:108,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6},{35:[1,109]},{22:69,24:72,25:73,26:74,35:$Vn,36:110,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{48:[1,111]},{22:69,24:72,25:73,26:74,35:$Vn,36:112,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},o($Vf,[2,24]),{37:[1,113],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($VD,[2,54]),{22:69,24:72,25:73,26:74,35:$Vn,36:128,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},o($VD,[2,62],{15:$Vk,48:$Vl}),o($VD,[2,63]),{22:69,24:72,25:73,26:74,35:$Vn,36:129,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:130,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},o($VD,[2,74]),o($VD,[2,75]),o($VD,[2,76]),o($VD,[2,77]),o($VD,[2,78]),o($VD,[2,79]),o($VD,[2,80]),o($VD,[2,81]),o($VD,[2,82]),o($VD,[2,83]),o($VD,[2,84]),o($VD,[2,97]),o($VD,[2,98]),o($VD,[2,99]),o($VD,[2,100]),o($VD,[2,101]),o($VD,[2,102]),o([2,5,8,9,10,11,12,13,15,16,23,30,34,37,38,40,44,46,48,49,53,54,55,60,61,62,63,64,65,66,67,69,70,71,72,79,82],$Vg,{35:$Vh,86:$Vi,87:$Vj}),{35:[1,131]},{35:[1,132]},{35:[1,133]},{35:[1,134]},{35:[1,135]},o($Vf,[2,30]),{22:69,24:72,25:73,26:74,35:[1,137],36:136,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{7:141,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,37:[1,139],43:138,45:140},{38:[1,142]},{37:[1,143],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{37:[1,144],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{37:[1,145],44:$VS},o($VD,[2,45]),o($VT,[2,47],{54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),{23:[1,147],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{37:[1,148],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{37:[1,149],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{23:[1,150],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{55:[1,151]},{22:69,24:72,25:73,26:74,35:$Vn,36:152,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{16:[1,153],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{22:69,24:72,25:73,26:74,35:$Vn,36:154,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{23:[1,155],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{23:[1,156]},{22:69,24:72,25:73,26:74,35:$Vn,36:157,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:158,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:159,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:160,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:161,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:162,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:163,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:164,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:165,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:166,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:167,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:168,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:169,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:170,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},o($VD,[2,59]),{37:[1,171],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($VD,[2,67]),{22:69,24:72,25:73,26:74,35:$Vn,36:172,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:173,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:174,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:175,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{22:69,24:72,25:73,26:74,35:$Vn,36:176,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{23:[1,177],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{7:178,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,22:69,24:72,25:73,26:74,35:$Vn,36:129,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},{37:[1,179],44:[1,180]},{14:181,15:$VU},o($VV,[2,41]),{38:[1,183]},{39:[1,184]},{14:185,15:$VU},{14:186,15:$VU},o($VD,[2,44]),{22:69,24:72,25:73,26:74,35:$Vn,36:187,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},o($Vf,[2,33]),o($VD,[2,85]),o($VD,[2,88]),o($Vf,[2,50]),{38:[1,188]},{37:[1,189],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($VW,[2,93]),{49:[1,190],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($Vf,[2,53]),o($Vf,[2,29]),o($VX,[2,55],{62:$VI,63:$VJ,65:$VL}),o($VX,[2,56],{62:$VI,63:$VJ,65:$VL}),o($VD,[2,57]),o($VD,[2,58]),o([2,5,8,9,10,11,12,13,16,23,30,34,37,38,40,44,46,49,53,64,79,82],[2,60],{54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($VD,[2,61]),o([2,5,8,9,10,11,12,13,16,23,30,34,37,38,40,44,46,49,53,64,66,67,79,82],[2,65],{54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VL,69:$VO,70:$VP,71:$VQ,72:$VR}),o([2,5,8,9,10,11,12,13,16,23,30,34,37,38,40,44,46,49,53,64,67,79,82],[2,66],{54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VL,66:$VM,69:$VO,70:$VP,71:$VQ,72:$VR}),o($VY,[2,68],{60:$VG,61:$VH,62:$VI,63:$VJ,65:$VL}),o($VY,[2,69],{60:$VG,61:$VH,62:$VI,63:$VJ,65:$VL}),o($VY,[2,70],{60:$VG,61:$VH,62:$VI,63:$VJ,65:$VL}),o($VY,[2,71],{60:$VG,61:$VH,62:$VI,63:$VJ,65:$VL}),o($VY,[2,72],{60:$VG,61:$VH,62:$VI,63:$VJ,65:$VL}),o($VY,[2,73],{60:$VG,61:$VH,62:$VI,63:$VJ,65:$VL}),o($VD,[2,64]),{37:[1,191],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{37:[1,192],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{37:[1,193],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{37:[1,194],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{37:[1,195],54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($Vf,[2,31]),{37:[1,196]},{14:197,15:$VU},{7:141,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,45:198},o($Vf,[2,39]),{2:$V0,4:199,6:3,7:22,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,16:[1,200],17:4,18:5,19:6,20:7,21:8,22:9,24:10,25:11,26:12,27:13,28:14,29:15,30:$V7,31:17,32:18,33:19,34:$V8,38:$V9,40:$Va,46:$Vb,52:28,53:$Vc,56:30,58:31,79:$Vd,82:$Ve},o($VV,[2,42]),{15:[1,202],50:[1,201]},o($Vf,[2,34],{41:203,42:[1,204]}),o($Vf,[2,43]),o($VT,[2,46],{54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),{39:[1,205]},{23:[1,206]},{49:[1,207]},o($VD,[2,87]),o($VD,[2,86]),o($VD,[2,89]),o($VD,[2,90]),o($VD,[2,91]),{22:69,24:72,25:73,26:74,35:$Vn,36:208,38:$Vo,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},o($Vf,[2,38]),o($VV,[2,40]),{2:$V0,6:39,7:22,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,16:[1,209],17:4,18:5,19:6,20:7,21:8,22:9,24:10,25:11,26:12,27:13,28:14,29:15,30:$V7,31:17,32:18,33:19,34:$V8,38:$V9,40:$Va,46:$Vb,52:28,53:$Vc,56:30,58:31,79:$Vd,82:$Ve},o($VZ,[2,11]),{7:210,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6},{22:69,24:72,25:73,26:74,35:$Vn,36:103,38:$Vo,47:211,51:$Vp,52:80,56:68,58:81,59:66,61:$Vq,68:$Vr,73:75,74:76,75:77,76:78,77:79,78:$Vs,79:$Vd,80:$Vt,81:$Vu,82:$Ve,83:$Vv,84:$Vw,85:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC},o($Vf,[2,35]),{14:213,15:$VU,19:212,40:$Va},{50:[1,214]},o($Vf,[2,52]),o($VW,[2,92]),o($Vf,[2,32],{54:$VE,55:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($VZ,[2,10]),{48:[1,215]},{16:[1,216],44:$VS},o($Vf,[2,36]),o($Vf,[2,37]),{53:[1,217]},{51:[1,218]},{23:[1,219]},{54:[1,220]},{49:[1,221]},o($Vf,[2,49]),{7:222,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6},{23:[1,223]},{55:[1,224]},o($Vf,[2,48]),{23:[1,225]},o($Vf,[2,51])],
defaultActions: {38:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  // importar tipos
  const {Type} = require('./abstract/Return');
  const {Primitivo} = require('./expression/Primitivo');
  const {Print} = require('./instruction/Print');
  const {Todeclare} = require('./instruction/Todeclare');
  const {Access} = require('./expression/Access');
  const {Arithmetic} = require('./expression/Arithmetic');
  const {TipoAritmetica} = require('./utils/TipoAritmetica');
  const {Logic} = require('./expression/Logic');
  const {TipoLogica} = require('./utils/TipoLogica');
  const {Relational} = require('./expression/Relational');
  const {TipoRelacional} = require('./utils/TipoRelacional');
  const {Statement} = require('./instruction/Statement');
  const {Function} = require('./instruction/Function');
  const {Parameters} = require('./expression/Parameters');
  const {ObtenerFunction} = require('./expression/ObtenerFunction');
  const {Assignation} = require('./instruction/Assignation');
  const {TablaErrores, ListaTablaErrores} = require('./reports/TablaErrores');
  const {If} = require('./instruction/If');
  const {While} = require('./instruction/While');
  const {IncreaseDecrease} = require('./expression/IncreaseDecrease');
  const {Main} = require('./instruction/Main');
  const {toLower} = require('./instruction/toLower');
  const {toUpper} = require('./instruction/toUpper');
  const {Length} = require('./expression/Length');
  const {Truncate} = require('./expression/Truncate');
  const {Round} = require('./expression/Round');
  const {Typeof} = require('./expression/Typeof');
  const {toString} = require('./expression/toString');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 23;
break;
case 1:return 35;
break;
case 2:return 37;
break;
case 3:return 57;
break;
case 4:return 'DOSPUNTOS';
break;
case 5:return 44;
break;
case 6:return 48;
break;
case 7:return 49;
break;
case 8:return 15;
break;
case 9:return "LLAVEDER";
break;
case 10:return 'KLEENE';
break;
case 11:return "MENOROIGUALQUE";
break;
case 12:return 72;
break;
case 13:return "IGUALACION";
break;
case 14:return 39;
break;
case 15:return 'DOLAR';
break;
case 16:return 86;
break;
case 17:return 87;
break;
case 18:return 70;
break;
case 19:return "MENORQUE";
break;
case 20:return 55;
break;
case 21:return 68;
break;
case 22:return 66;
break;
case 23:return 67;
break;
case 24:return 34;   // funcion de imprimir
break;
case 25:return 91;
break;
case 26:return 92;
break;
case 27:return 40;
break;
case 28:return 46;    
break;
case 29:return 42;     
break;
case 30:return 13;     
break;
case 31:return 79;
break;
case 32:return 82;
break;
case 33:return 'RETURN';  
break;
case 34:return 50;
break;
case 35:return 53;
break;
case 36:return 'ADD';
break;
case 37:return 'SWITCH';
break;
case 38:return 'CASE';
break;
case 39:return 'DEFAULT';
break;
case 40:return 'FOR';
break;
case 41:return 'DO';
break;
case 42:return 'BREAK';
break;
case 43:return 'CONTINUE';
break;
case 44:return 81;
break;
case 45:return 80;
break;
case 46:return 83;
break;
case 47:return 84;
break;
case 48:return 85;
break;
case 49:return 'TOCHARARRAY';
break;
case 50:return 30;
break;
case 51:return 60;
break;
case 52:return 61;
break;
case 53:return 63;
break;
case 54:return 62;
break;
case 55:return 64;
break;
case 56:return 65;
break;
case 57:return 9;
break;
case 58:return 11;
break;
case 59:return 10;
break;
case 60:return 12;
break;
case 61:return 8;
break;
case 62:
break;
case 63:
break;
case 64:
break;
case 65:
break;
case 66:return 38;
break;
case 67:return 88;
break;
case 68:return 51;
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 90; 
break;
case 70:cadena="";this.begin("string");
break;
case 71:cadena+=yy_.yytext;
break;
case 72:cadena+="\"";
break;
case 73:cadena+="\n";
break;
case 74:cadena+="\t";
break;
case 75:cadena+="\\";
break;
case 76:cadena+="\'";
break;
case 77:yy_.yytext=cadena; this.popState(); return 89;
break;
case 78:return 5;
break;
case 79: 
 $$ = ListaTablaErrores.push(new TablaErrores("Léxico", "El caracter "+yy_.yytext+" no pertenece al lenguaje",  yy_.yylloc.first_lin, yy_.yylloc.first_column )); 
  console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\$)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:while\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:Length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(\/\/).*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:[0-9]+\b)/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[71,72,73,74,75,76,77],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GRAMMAR;
exports.Parser = GRAMMAR.Parser;
exports.parse = function () { return GRAMMAR.parse.apply(GRAMMAR, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}