/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,27],$V2=[1,28],$V3=[1,29],$V4=[1,30],$V5=[1,31],$V6=[1,32],$V7=[1,18],$V8=[1,22],$V9=[1,20],$Va=[1,21],$Vb=[1,25],$Vc=[2,5,8,9,10,11,12,13,16,31,35,37,43,50],$Vd=[2,77],$Ve=[1,43],$Vf=[1,48],$Vg=[1,49],$Vh=[1,45],$Vi=[1,46],$Vj=[34,35,45,52],$Vk=[1,58],$Vl=[1,70],$Vm=[1,65],$Vn=[1,55],$Vo=[1,59],$Vp=[1,63],$Vq=[1,64],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[2,5,8,9,10,11,12,13,16,23,31,34,35,37,41,43,46,50,51,52,57,58,59,60,61,62,63,64,66,67,68,69],$Vw=[1,98],$Vx=[1,100],$Vy=[1,88],$Vz=[1,89],$VA=[1,90],$VB=[1,91],$VC=[1,92],$VD=[1,93],$VE=[1,94],$VF=[1,95],$VG=[1,96],$VH=[1,97],$VI=[1,99],$VJ=[1,101],$VK=[1,115],$VL=[16,34,41],$VM=[1,144],$VN=[34,41],$VO=[2,5,8,9,10,11,12,13,16,23,31,34,35,36,37,41,43,46,50,51,52,57,58,59,60,61,62,63,64,66,67,68,69],$VP=[2,5,8,9,10,11,12,13,16,23,31,34,35,37,41,43,46,50,51,52,57,58,61,63,64,66,67,68,69],$VQ=[2,5,8,9,10,11,12,13,16,23,31,34,35,37,41,43,46,50,51,52,61,63,64,66,67,68,69],$VR=[2,5,8,9,10,11,12,13,16,31,35,37,39,43,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"TIPO":7,"RDOUBLE":8,"RENTERO":9,"RCHAR":10,"RSTRING":11,"RBOOLEAN":12,"VOID":13,"BLOQUE_INSTRUCCIONES":14,"LLAVEIZQ":15,"LLAVEDER":16,"DEFPRINT":17,"DECLARAR":18,"DIF":19,"FUNCION":20,"DWHILE":21,"LLAMAR_FUNCION":22,"PTCOMA":23,"INCREMENTOYDECREMENTO":24,"VECTOR":25,"MODIFICARVECTOR":26,"LISTA":27,"AGREGARVALORLISTA":28,"MODIFICARVALORLISTA":29,"ASIGNACION":30,"RPRIN":31,"PARIZQ":32,"EXPRESION":33,"PARDER":34,"ID":35,"IGUAL":36,"IF":37,"DELSE":38,"ELSE":39,"LISTA_PARAMETROS":40,"COMA":41,"PARAMETRO":42,"WHILE":43,"LISTA_EXPRESIONES":44,"CORIZR":45,"CORDER":46,"NEW":47,"ENTERO":48,"ACCEDERVECTOR":49,"LIST":50,"MENORQUE":51,"MAYORQUE":52,"ACCEDERID":53,"PUNTO":54,"ACCEDERLISTA":55,"PRIMITIVO":56,"MAS":57,"MENOS":58,"DIVISION":59,"POR":60,"POTENCIA":61,"MODULO":62,"AND":63,"OR":64,"NOT":65,"IGUALACION":66,"DIFERENCIACION":67,"MENOROIGUALQUE":68,"MAYOROIGUALQUE":69,"OPERADORTERNARIO":70,"AUMENTO":71,"REDUCCION":72,"DECIMAL":73,"CADENA":74,"CARACTER":75,"TRUE":76,"FALSE":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RDOUBLE",9:"RENTERO",10:"RCHAR",11:"RSTRING",12:"RBOOLEAN",13:"VOID",15:"LLAVEIZQ",16:"LLAVEDER",23:"PTCOMA",31:"RPRIN",32:"PARIZQ",34:"PARDER",35:"ID",36:"IGUAL",37:"IF",39:"ELSE",41:"COMA",43:"WHILE",45:"CORIZR",46:"CORDER",47:"NEW",48:"ENTERO",50:"LIST",51:"MENORQUE",52:"MAYORQUE",54:"PUNTO",57:"MAS",58:"MENOS",59:"DIVISION",60:"POR",61:"POTENCIA",62:"MODULO",63:"AND",64:"OR",65:"NOT",66:"IGUALACION",67:"DIFERENCIACION",68:"MENOROIGUALQUE",69:"MAYOROIGUALQUE",70:"OPERADORTERNARIO",71:"AUMENTO",72:"REDUCCION",73:"DECIMAL",74:"CADENA",75:"CARACTER",76:"TRUE",77:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[14,3],[14,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[17,5],[18,3],[18,5],[18,7],[30,4],[19,5],[19,6],[38,2],[38,2],[20,6],[20,5],[40,3],[40,1],[42,2],[21,5],[22,4],[22,3],[44,3],[44,1],[25,11],[25,9],[26,4],[27,12],[28,6],[29,4],[33,1],[33,3],[33,3],[33,3],[33,3],[33,2],[33,3],[33,3],[33,1],[33,1],[33,3],[33,3],[33,3],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,1],[33,1],[55,6],[49,4],[53,1],[24,2],[24,2],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 38:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = Type.DOUBLE; 
break;
case 5:
 this.$ = Type.INT; 
break;
case 6:
 this.$ = Type.CHAR; 
break;
case 7:
 this.$ = Type.STRING; 
break;
case 8:
 this.$ = Type.BOOLEAN; 
break;
case 9:
 this.$ = Type.VOID; 
break;
case 10:
 this.$ = new Statement($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 11:
 this.$ = new Statement([],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 12: case 13: case 14: case 15: case 16: case 19: case 20: case 21: case 22: case 23: case 24: case 33: case 34: case 51: case 59: case 60: case 71: case 72: case 73: case 74:
 this.$ = $$[$0]; 
break;
case 17: case 18:
 this.$ = $$[$0-1]; 
break;
case 25:
 this.$ = ListaTablaErrores.push(new TablaErrores("Sintáctico", "No se esperaba el identificador "+yytext, this._$.first_line, this._$.first_column ));  
    console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 26:
 this.$ = new Print(_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2]); 
break;
case 27:
 this.$ = new Todeclare($$[$0-1],$$[$0-2],null,_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 28:
 this.$ = new Todeclare($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 30:
 this.$ = new Assignation($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 31:
 this.$ = new If($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 32:
  this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 35:
 this.$ = new Function($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column ); 
break;
case 36:
 this.$ = new Function($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 37: case 43:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 39:
this.$ = new Parameters($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 40:
  this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 41:
 this.$ = new ObtenerFunction($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 42:
 this.$ = new ObtenerFunction($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 44:
 this.$ = [$$[$0]] 
break;
case 52:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.SUMA,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 53:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.RESTA,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 54:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.DIVISION,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 55:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 56:
 this.$ = new Arithmetic($$[$0],$$[$0],TipoAritmetica.MENOSUNARIO,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 57:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.POTENCIA,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 58:
 this.$ = new Arithmetic($$[$0-2],$$[$0],TipoAritmetica.MODULO,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 61:
 this.$ = $$[$0-1];
break;
case 62:
 this.$ = new Logic($$[$0-2],$$[$0],TipoLogica.AND,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 63:
 this.$ = new Logic($$[$0-2],$$[$0],TipoLogica.OR,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 64:
 this.$ = new Logic($$[$0],$$[$0],TipoLogica.NOT,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 65:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.IGUAL,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 66:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.DIFERENTE,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 67:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.MENOR,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 68:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.MENORIGUAL,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 69:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.MAYOR,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 70:
 this.$ = new Relational($$[$0-2],$$[$0],TipoRelacional.MAYORIGUAL,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 77:
 this.$ = new Access($$[$0],_$[$0].first_line, _$[$0].first_column); 
break;
case 80:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.DOUBLE); 
break;
case 81:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.INT); 
break;
case 82:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.STRING);
break;
case 83:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.CHAR); 
break;
case 84: case 85:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.BOOLEAN); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:19,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,17:4,18:5,19:6,20:7,21:8,22:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:$V7,35:$V8,37:$V9,43:$Va,49:24,50:$Vb,53:23,55:26},{1:[3]},{2:$V0,5:[1,33],6:34,7:19,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,17:4,18:5,19:6,20:7,21:8,22:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:$V7,35:$V8,37:$V9,43:$Va,49:24,50:$Vb,53:23,55:26},o($Vc,[2,3]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,14]),o($Vc,[2,15]),o($Vc,[2,16]),{23:[1,35]},{23:[1,36]},o($Vc,[2,19]),o($Vc,[2,20]),o($Vc,[2,21]),o($Vc,[2,22]),o($Vc,[2,23]),o($Vc,[2,24]),{23:[1,37]},{32:[1,38]},{35:[1,39],45:[1,40]},{32:[1,41]},{32:[1,42]},o([15,45,54,71,72],$Vd,{32:$Ve,36:[1,44]}),{15:$Vf,45:$Vg,54:[1,47],71:$Vh,72:$Vi},{36:[1,50]},{51:[1,51]},{36:[1,52]},o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,17]),o($Vc,[2,18]),o($Vc,[2,25]),{22:57,24:60,32:$Vk,33:53,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{23:[1,71],32:[1,73],36:[1,72]},{46:[1,74]},{22:57,24:60,32:$Vk,33:75,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:76,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:79,34:[1,78],35:$Vl,44:77,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:80,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},o($Vv,[2,78]),o($Vv,[2,79]),{32:[1,81]},{22:57,24:60,32:$Vk,33:82,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{45:[1,83]},{22:57,24:60,32:$Vk,33:84,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{7:85,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6},{22:57,24:60,32:$Vk,33:86,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{34:[1,87],51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},o($Vv,[2,51]),{22:57,24:60,32:$Vk,33:102,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},o($Vv,[2,59],{15:$Vf,45:$Vg,71:$Vh,72:$Vi}),o($Vv,[2,60]),{22:57,24:60,32:$Vk,33:103,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:104,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},o($Vv,[2,71]),o($Vv,[2,72]),o($Vv,[2,73]),o($Vv,[2,74]),o($Vv,[2,80]),o($Vv,[2,81]),o($Vv,[2,82]),o($Vv,[2,83]),o($Vv,[2,84]),o($Vv,[2,85]),o([2,5,8,9,10,11,12,13,15,16,23,31,34,35,37,41,43,45,46,50,51,52,57,58,59,60,61,62,63,64,66,67,68,69,71,72],$Vd,{32:$Ve}),o($Vc,[2,27]),{22:57,24:60,32:[1,106],33:105,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{7:110,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,34:[1,108],40:107,42:109},{35:[1,111]},{34:[1,112],51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},{34:[1,113],51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},{34:[1,114],41:$VK},o($Vv,[2,42]),o($VL,[2,44],{51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),{23:[1,116],51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},{22:57,24:60,32:$Vk,33:117,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{16:[1,118],51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},{22:57,24:60,32:$Vk,33:119,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{23:[1,120],51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},{52:[1,121]},{23:[1,122],51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},{23:[1,123]},{22:57,24:60,32:$Vk,33:124,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:125,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:126,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:127,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:128,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:129,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:130,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:131,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:132,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:133,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:134,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:135,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:136,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{22:57,24:60,32:$Vk,33:137,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},o($Vv,[2,56]),{34:[1,138],51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},o($Vv,[2,64]),{23:[1,139],51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},{7:140,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,22:57,24:60,32:$Vk,33:103,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},{34:[1,141],41:[1,142]},{14:143,15:$VM},o($VN,[2,38]),{35:[1,145]},{36:[1,146]},{14:147,15:$VM},{14:148,15:$VM},o($Vv,[2,41]),{22:57,24:60,32:$Vk,33:149,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},o($Vc,[2,30]),{34:[1,150],51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},o($VO,[2,76]),{46:[1,151],51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},o($Vc,[2,47]),{35:[1,152]},o($Vc,[2,50]),o($Vc,[2,26]),o($VP,[2,52],{59:$VA,60:$VB,62:$VD}),o($VP,[2,53],{59:$VA,60:$VB,62:$VD}),o($Vv,[2,54]),o($Vv,[2,55]),o([2,5,8,9,10,11,12,13,16,23,31,34,35,37,41,43,46,50,61],[2,57],{51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($Vv,[2,58]),o([2,5,8,9,10,11,12,13,16,23,31,34,35,37,41,43,46,50,61,63,64],[2,62],{51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,62:$VD,66:$VG,67:$VH,68:$VI,69:$VJ}),o([2,5,8,9,10,11,12,13,16,23,31,34,35,37,41,43,46,50,61,64],[2,63],{51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,62:$VD,63:$VE,66:$VG,67:$VH,68:$VI,69:$VJ}),o($VQ,[2,65],{57:$Vy,58:$Vz,59:$VA,60:$VB,62:$VD}),o($VQ,[2,66],{57:$Vy,58:$Vz,59:$VA,60:$VB,62:$VD}),o($VQ,[2,67],{57:$Vy,58:$Vz,59:$VA,60:$VB,62:$VD}),o($VQ,[2,68],{57:$Vy,58:$Vz,59:$VA,60:$VB,62:$VD}),o($VQ,[2,69],{57:$Vy,58:$Vz,59:$VA,60:$VB,62:$VD}),o($VQ,[2,70],{57:$Vy,58:$Vz,59:$VA,60:$VB,62:$VD}),o($Vv,[2,61]),o($Vc,[2,28]),{34:[1,153]},{14:154,15:$VM},{7:110,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,42:155},o($Vc,[2,36]),{2:$V0,4:156,6:3,7:19,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,16:[1,157],17:4,18:5,19:6,20:7,21:8,22:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:$V7,35:$V8,37:$V9,43:$Va,49:24,50:$Vb,53:23,55:26},o($VN,[2,39]),{15:[1,159],47:[1,158]},o($Vc,[2,31],{38:160,39:[1,161]}),o($Vc,[2,40]),o($VL,[2,43],{51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),{23:[1,162]},{46:[1,163]},{36:[1,164]},{22:57,24:60,32:$Vk,33:165,35:$Vl,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},o($Vc,[2,35]),o($VN,[2,37]),{2:$V0,6:34,7:19,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,16:[1,166],17:4,18:5,19:6,20:7,21:8,22:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:$V7,35:$V8,37:$V9,43:$Va,49:24,50:$Vb,53:23,55:26},o($VR,[2,11]),{7:167,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6},{22:57,24:60,32:$Vk,33:79,35:$Vl,44:168,48:$Vm,49:61,53:56,55:62,56:54,58:$Vn,65:$Vo,70:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu},o($Vc,[2,32]),{14:170,15:$VM,19:169,37:$V9},o($Vc,[2,49]),o($VO,[2,75]),{47:[1,171]},o($Vc,[2,29],{51:$Vw,52:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($VR,[2,10]),{45:[1,172]},{16:[1,173],41:$VK},o($Vc,[2,33]),o($Vc,[2,34]),{50:[1,174]},{48:[1,175]},{23:[1,176]},{51:[1,177]},{46:[1,178]},o($Vc,[2,46]),{7:179,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6},{23:[1,180]},{52:[1,181]},o($Vc,[2,45]),{23:[1,182]},o($Vc,[2,48])],
defaultActions: {33:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  // importar tipos
  const {Type} = require('./abstract/Return');
  const {Primitivo} = require('./expression/Primitivo');
  const {Print} = require('./instruction/Print');
  const {Todeclare} = require('./instruction/Todeclare');
  const {Access} = require('./expression/Access');
  const {Arithmetic} = require('./expression/Arithmetic');
  const {TipoAritmetica} = require('./utils/TipoAritmetica');
  const {Logic} = require('./expression/Logic');
  const {TipoLogica} = require('./utils/TipoLogica');
  const {Relational} = require('./expression/Relational');
  const {TipoRelacional} = require('./utils/TipoRelacional');
  const {Statement} = require('./instruction/Statement');
  const {Function} = require('./instruction/Function');
  const {Parameters} = require('./expression/Parameters');
  const {ObtenerFunction} = require('./expression/ObtenerFunction');
  const {Assignation} = require('./instruction/Assignation');
  const {TablaErrores, ListaTablaErrores} = require('./reports/TablaErrores');
  const {If} = require('./instruction/If');
  const {While} = require('./instruction/While');
  /*
  const {Method} = require('./instruction/Method');
  const {ObtenerMethod} = require('./instruction/ObtenerMethod');*/


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 23;
break;
case 1:return 32;
break;
case 2:return 34;
break;
case 3:return 54;
break;
case 4:return 'DOSPUNTOS';
break;
case 5:return 41;
break;
case 6:return 45;
break;
case 7:return 46;
break;
case 8:return 15;
break;
case 9:return "LLAVEDER";
break;
case 10:return 'KLEENE';
break;
case 11:return "MENOROIGUALQUE";
break;
case 12:return 69;
break;
case 13:return "IGUALACION";
break;
case 14:return 36;
break;
case 15:return 'DOLAR';
break;
case 16:return 71;
break;
case 17:return 72;
break;
case 18:return 67;
break;
case 19:return "MENORQUE";
break;
case 20:return 52;
break;
case 21:return 65;
break;
case 22:return 63;
break;
case 23:return 64;
break;
case 24:return 31;   // funcion de imprimir
break;
case 25:return 76;
break;
case 26:return 77;
break;
case 27:return 37;
break;
case 28:return 43;    
break;
case 29:return 39;     
break;
case 30:return 13;     
break;
case 31:return 'RETURN';  
break;
case 32:return 47;
break;
case 33:return 50;
break;
case 34:return 'ADD';
break;
case 35:return 'SWITCH';
break;
case 36:return 'CASE';
break;
case 37:return 'DEFAULT';
break;
case 38:return 'FOR';
break;
case 39:return 'DO';
break;
case 40:return 'BREAK';
break;
case 41:return 'CONTINUE';
break;
case 42:return 'TOLOWER';
break;
case 43:return 'TOUPPER';
break;
case 44:return 'LENGTH';
break;
case 45:return 'TRUNCATE';
break;
case 46:return 'ROUND';
break;
case 47:return 'TYPEOF';
break;
case 48:return 'TOSTRING';
break;
case 49:return 'TOCHARARRAY';
break;
case 50:return 'MAIN';
break;
case 51:return 57;
break;
case 52:return 58;
break;
case 53:return 60;
break;
case 54:return 59;
break;
case 55:return 61;
break;
case 56:return 62;
break;
case 57:return 9;
break;
case 58:return 11;
break;
case 59:return 10;
break;
case 60:return 12;
break;
case 61:return 8;
break;
case 62:
break;
case 63:
break;
case 64:
break;
case 65:
break;
case 66:return 35;
break;
case 67:return 73;
break;
case 68:return 48;
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 75; 
break;
case 70:cadena="";this.begin("string");
break;
case 71:cadena+=yy_.yytext;
break;
case 72:cadena+="\"";
break;
case 73:cadena+="\n";
break;
case 74:cadena+="\t";
break;
case 75:cadena+="\\";
break;
case 76:cadena+="\'";
break;
case 77:yy_.yytext=cadena; this.popState(); return 74;
break;
case 78:return 5;
break;
case 79: 
 $$ = ListaTablaErrores.push(new TablaErrores("Léxico", "El caracter "+yy_.yytext+" no pertenece al lenguaje",  yy_.yylloc.first_lin, yy_.yylloc.first_column )); 
  console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\$)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:while\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(\/\/).*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:[0-9]+\b)/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[71,72,73,74,75,76,77],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}